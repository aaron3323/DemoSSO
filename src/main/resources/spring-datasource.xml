<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
	 http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
	 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">
     
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	  <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	  <property name="driverClassName" value="com.mysql.jdbc.Driver" />
	 
	    <!-- 基本属性 url、user、password -->
	    <property name="url" value="jdbc:mysql://127.0.0.1:3306/demo?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull" />
	    <property name="username" value="root" />
	    <property name="password" value="123456789" />
	 
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="2" />
	    <property name="minIdle" value="3" />
	    <property name="maxActive" value="20" />
	    
	    <!--在内置监控页面weburi-detail.html中，查看JdbcPoolConnectionOpenCount和JdbcPoolConnectionCloseCount属性，如果不相等，就是泄漏了。 -->
		 <property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
	    <property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
	    <property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
	 
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	 
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	 
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	 
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	 
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
	 
	    <!-- 配置监控统计拦截的filters -->
<!-- 	  <property name="filters" value="wall" /> -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter"/>
				<ref bean="wall-filter"/>
				<ref bean="log-filter"/>
			</list>
		</property>
	</bean>
	
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="mergeSql" value="true" />
		<property name="slowSqlMillis" value="3000" />
		<property name="logSlowSql" value="true" />
	</bean>	
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="mysql" />
		<property name="logViolation" value="true"/>
		<property name="throwException" value="false"/>
	</bean>
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<property name="statementExecutableSqlLogEnable" value="false" />
		<property name="resultSetLogEnabled" value="false" />
	</bean>
	
<!-- 	<context:annotation-config /> -->
<!-- 	<context:component-scan base-package="com.demo.subsystem.common" /> -->

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="dbUtilsTemplate" class="com.demo.subsystem.common.DbUtilsTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 事物 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
		<property name="dataSource" ref="dataSource" />  
	</bean>
	
	<!-- AOP配置事物 -->  
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">  
		<tx:attributes>  
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />  
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" />  
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception" />  
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="edite*" propagation="REQUIRED" rollback-for="Exception" />  
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />  
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />  
			<tx:method name="query*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="select*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>  
	</tx:advice>
	
	<!-- 配置AOP切面 -->  
	<aop:config expose-proxy="true">
		<aop:pointcut id="transactionPointcut" expression="execution(* com.demo.subsystem.*.service.*.*(..))"/>
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>
	</aop:config>
	
	<!-- 使用annotation注解方式配置事务 -->  
<!-- 	<tx:annotation-driven transaction-manager="transactionManager" /> -->
</beans>